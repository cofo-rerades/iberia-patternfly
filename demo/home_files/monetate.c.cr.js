monetate.c.cr({"data": "/**************************************************************\n *  MNTTGF 2.4.5  09/02/2024\n **************************************************************\n  - mnttGetCookie\n  - Fix getCookie Optanon\n  - Fix number sendeventQM\n **************************************************************/\n//# sourceURL=MNTTGF-2-4.js\n\nMNTT_NAME=\"MNTTGF 2.4\";\n\nif (window.mnttGF) {\n  mnttLog2Con(MNTT_NAME,\"\",\"Monetate: Global functions already loaded!!\");\n} else {\n\n\n  /////////////////////////////////\n  // Constantes\n  /////////////////////////////////\n\n  MNTT_LOG = localStorage.getItem(\"MONETATE_LOG\");\n  mnttGF=\"loading\";\n\n  if (window.location.host.indexOf(\"www.iberia.com\")>=0)\n    MNTT_DOMAIN=\"PROD\";\n  else\n    MNTT_DOMAIN=\"PREPROD\";\n\n  // Fix para solventar el problema de la no existencia de window.jQuery\n  // provocado por la nueva release de iberia.com con webpack\n\n  timestamp = new Date().toLocaleString();\n  console.debug(timestamp+ \"[\" + MNTT_NAME + \"] Fixing JQuery=$\");\n  var counterJQuery = 0;\n  var intervalJQuery = setInterval(function() {\n    if (typeof($) == \"function\" && typeof($()) == \"object\") {\n        jQuery = $;\n      clearInterval(intervalJQuery);\n    }\n    if (counterJQuery++ > 30) {\n      timestamp = new Date().toLocaleString();\n      console.error(timestamp+ \"[\" + MNTT_NAME + \"] JQuery no definido por la aplicacion en 3 segundos!! (timeout error)\");\n      clearInterval(intervalJQuery);\n    }\n  }, 100);\n\n  /////////////////////////////////\n  // Funciones anal\u00edtica\n  /////////////////////////////////\n\n  // Funciones de QM\n  mnttSendEventQM = function (eventAction, eventLabel, eventNumber, eventValue = \"\", eventDesc=\"\") {\n    var counter = 0;\n    var descr = \"\";\n\n    if (eventDesc == \"\")\n      descr=eventNumber;\n    else\n      descr=eventDesc;\n\n\n    if (typeof eventValue == \"string\" || typeof eventValue == \"number\")\n    {\n      if (typeof eventValue == \"string\")\n        eventValue=eventValue.replaceAll(/(^\\s+|\\s+$|\\s+(?=\\s))/g, \"\");\n\n      if (!!window.QuantumMetricAPI && !!window.QuantumMetricAPI.sendEvent) {\n        window.QuantumMetricAPI.sendEvent(eventNumber, 0 , eventValue);\n        mnttLog2Con(eventAction,eventLabel,\"Tracking QM[\" + descr + \"]: done! (\"+counter+\")\",\"debug\");\n      } else {\n        var intervalQM = setInterval(function() {\n          if (!!window.QuantumMetricAPI && !!window.QuantumMetricAPI.sendEvent) {\n              window.QuantumMetricAPI.sendEvent(eventNumber, 0, eventValue);\n              mnttLog2Con(eventAction,eventLabel,\"Tracking QM[\" + descr + \"]: done! (\"+counter+\")\",\"debug\");\n              clearInterval(intervalQM);\n          } else if (counter++ > 500 ) {\n              mnttLog2Con(eventAction,eventLabel,\"Tracking QM[\" + descr + \"]: Timeout - QuantumMetricAPI no disponible\",\"info\");\n\n              clearInterval(intervalQM);\n          } else if (!!mnttGetCookie(\"OptanonConsent\") && mnttGetCookie(\"OptanonConsent\").indexOf(\"C0002:1\")<0 ) {\n            mnttLog2Con(eventAction,eventLabel,\"Tracking QM[\" + descr + \"]: Cookies not accepted - QuantumMetricAPI no disponible\",\"info\");\n\n            clearInterval(intervalQM);\n          }\n        }, 200);\n      }\n    } else {\n      mnttLog2Con(eventAction,eventLabel,\"Tracking QM[\" + descr + \"]: el EventValue es un tipo de dato invalido\",\"warning\");\n    }\n  };\n\n  // Funciones para compatibilidad con templates antiguos\n  mnttLog2TL=function(testName, variantName) {};\n  mnttError2TL=function (testName, variantName) {};\n\n  // Env\u00eda hits a GoogleAnalytics\n  mnttLog2GTM=function (eventAction, eventLabel, eventValue=\"\") {\n    mnttLog2Con(eventAction,eventLabel,\"Tracking GA, GA40 & QM...\",\"debug\");\n    mnttLog2GA(eventAction, eventLabel, eventValue);\n    mnttLog2GA40(eventAction, eventLabel, eventValue);\n    mnttLog2QM(eventAction, eventLabel);\n  };\n\n  // Envia hits a GA\n  mnttLog2GA=function (eventAction, eventLabel, eventValue = \"\"){\n    var counter = 0;\n\n    var intervalGA = setInterval(function() {\n      if (!!window.DigitalChange) {\n\n        var codSeg = \"NoTrackingCode\";\n\n        if (!!window.datalayer_general && !!datalayer_general.codigoSeguimiento) {\n          codSeg=datalayer_general.codigoSeguimiento;\n        } else if (!!window.digital_data && !!window.digital_data.TrackingCode) {\n          codSeg=digital_data.TrackingCode;\n        }\n\n        if (eventValue!=\"\") {\n          DigitalChange(\"link\", { codigoSeguimiento: codSeg,\n            eventCategory: \"MonetateByGTM\",\n            eventAction: eventAction,\n            eventLabel: eventLabel,\n            eventValue: eventValue });\n\n        } else {\n          DigitalChange(\"link\", { codigoSeguimiento: codSeg,\n              eventCategory: \"MonetateByGTM\",\n              eventAction: eventAction,\n              eventLabel: eventLabel });\n        }\n        mnttLog2Con(eventAction,eventLabel,\"Tracking GA: done! (\"+counter+\")\",\"info\");\n        clearInterval(intervalGA);\n\n      } else if (counter++ > 30) {\n        if (!!window.DigitalChange)  mnttLog2Con(eventAction,eventLabel,\"Tracking GA: Timeout - DigitalChange no disponible\",\"error\");\n\n        clearInterval(intervalGA);\n      }\n    }, 500);\n\n  };\n\n  // Envia hits a GA40\n  mnttLog2GA40=function (eventAction, eventLabel, eventValue = \"\", eventName = \"MNTTGF2GA4\"){\n    var counter = 0;\n    var GA4_digital_data = {};\n\n    if (eventValue!=\"\") {\n      GA4_digital_data = {\n        'eventCategory': eventName,\n        'eventAction': eventAction,\n        'eventLabel': eventLabel,\n        'eventName': eventName,\n        'eventValue': eventValue\n        };\n    } else {\n      GA4_digital_data = {\n        'eventCategory': eventName,\n        'eventAction': eventAction,\n        'eventLabel': eventLabel,\n        'eventName': eventName\n        };\n    }\n\n    var intervalGA4 = setInterval(function() {\n      if (!!window.dataLayer && !!window.dataLayer.push) {\n        dataLayer.push(GA4_digital_data,{'event':'interaction'});\n        mnttLog2Con(eventAction,eventLabel,\"Tracking GA40: done! (\"+counter+\")\",\"info\");\n        clearInterval(intervalGA4);\n      } else if (counter++ > 30) {\n        mnttLog2Con(eventAction,eventLabel,\"Tracking GA40: Timeout - dataLayer.push no disponible\",\"error\");\n        clearInterval(intervalGA4);\n      }\n    }, 500);\n\n  };\n\n  // Envia hits a QM\n  mnttLog2QM=function (eventAction, eventLabel, texto = \"\", severity = \"\"){\n    var counter = 0;\n    var eventNum=0;\n    var tagEvent=\"\", eventValue=\"\";\n\n    if (texto==\"\") {\n      eventNum=69;\n      tagEvent=\"Monetate Segment\";\n    } else if (severity == \"error\") {\n      eventNum=216;\n      tagEvent=\"Console Error\";\n    } else {\n      //warning\n      eventNum=276;\n      tagEvent=\"Monetate warning\";\n    }\n\n    eventValue=\"[\" + eventAction + ':' + eventLabel + \"] \" + texto;\n\n    mnttSendEventQM(eventAction, eventLabel, eventNum, eventValue, tagEvent);\n\n  };\n\n  /////////////////////////////////\n  // Funciones debug\n  /////////////////////////////////\n\n  // Envia a consola una lista interactiva de las propiedades del objeto JavaScript especificado\n  mnttObj2Con=function (testName, variantName, objeto) {\n    if (typeof MNTT_LOG !== \"undefined\" && MNTT_LOG != \"\") {\n      mnttLog2Con(testName, variantName, \"Objeto:\");\n      tmpObj={};\n      tmpObj._testName=testName;\n      tmpObj._variantName=variantName;\n      tmpObj.objeto=objeto;\n      console.dir(tmpObj);\n    }\n  };\n\n  // Env\u00eda a consola y al DOM para que lo capture QM el aviso especificado\n  mnttLog2Con=function (testName, variantName, texto, criticidad) {\n\n    var aviso=\"\";\n    var avisoHTML=\"\";\n    var avisoTime=\"\";\n    var quadrigam=\"[]\";\n\n    if (typeof testName === \"undefined\" || testName == \"\") testName = \"Not Defined\";\n    if (typeof variantName === \"undefined\" || variantName == \"\") variantName = \"Content Server\";\n    if (typeof criticidad === \"undefined\" || criticidad == \"\") criticidad = \"debug\";\n\n    // Todos los mensajes de que contienen \"inicio Variante\" o \"KO\" tienen que ir como warning para registrarse en QM como trazas\n    if (criticidad!==\"warning\" && (texto.indexOf(\"Inicio de la variante\")>=0 || texto.indexOf(\"KO\")>=0)) {criticidad=\"warning\";}\n\n    var timestamp = new Date().toLocaleString(\"es-ES\",{timeZoneName:\"short\"});\n\n    aviso = (\"[\" + testName + \"|\" + variantName + \"] \" + texto).trim();\n    avisoTime = timestamp + \" \" + aviso;\n    if (!!window.datalayer_general && !!window.datalayer_general.quadrigam) {\n      quadrigam=\"[\"+datalayer_general.quadrigam+\"]\";\n    }\n    avisoHTML='<span class=\"mnttgf_' + criticidad +'\">'+timestamp +' ' + quadrigam + aviso +'</span>';\n\n\n    // lo metemos en el DOM para que lo registre QM solo si el mensaje es warning, info o error.\n    if (criticidad!==\"debug\") {\n      if (document.getElementById(\"MNTT_LOGS\")==null) {\n        output_html = '<div data-nosnippet id=\"MNTT_LOGS\" class=\"mnttgf_logs\" style=\"display: none;\"></div>';\n        document.querySelector(\"body\").insertAdjacentHTML(\"beforeend\", output_html);\n      }\n\n      idText = mnttTrimText(testName + '_' + variantName);\n\n      if (document.getElementById(idText) == null) {\n        output_html = '<div id=\"' + idText + '\" class=\"mnttgf_logs\"> Monetate log: [' + testName + '][' + variantName + '] </div>';\n        document.getElementById(\"MNTT_LOGS\").insertAdjacentHTML(\"beforeend\", output_html);\n      }\n\n      document.getElementById(idText).insertAdjacentHTML(\"beforeend\",avisoHTML);\n\n      //disparamos el evento de QM si el mensaje es warning o error\n      if (criticidad==\"error\" || criticidad==\"warning\") {\n        mnttLog2QM(testName,variantName,quadrigam + \" \" + texto,criticidad);\n      }\n    }\n\n    if (typeof MNTT_LOG !== \"undefined\" && MNTT_LOG != \"\") {\n\n      switch (MNTT_LOG) {\n        case \"error\":\n          switch (criticidad) {\n            case \"error\":\n              console.error(aviso);\n              break;\n          }\n          break;\n        case \"warning\":\n          switch (criticidad) {\n            case \"error\":\n              console.error(aviso);\n              break;\n            case \"warning\":\n              console.warn(aviso);\n              break;\n          }\n          break;\n        case \"info\":\n          switch (criticidad) {\n            case \"error\":\n              console.error(aviso);\n              break;\n            case \"warning\":\n              console.warn(aviso);\n              break;\n            case \"info\":\n              console.info(aviso);\n              break;\n          }\n          break;\n        case \"debug\":\n          switch (criticidad) {\n            case \"error\":\n              console.error(aviso);\n              break;\n            case \"warning\":\n              console.warn(aviso);\n              break;\n            case \"info\":\n              console.info(aviso);\n              break;\n            case \"debug\":\n              console.debug(aviso);\n              break;\n          }\n          break;\n      }\n    }\n  };\n\n\n  /////////////////////////////////\n  // Funciones utilidades\n  /////////////////////////////////\n\n  // Devuelve el valor de una cookie\n  mnttGetCookie=function (cName){\n    var name = cName + \"=\";\n    var cDecoded = decodeURIComponent(document.cookie);\n    var cArr = cDecoded.split('; ');\n    var res;\n    cArr.forEach(function(val) {\n      if (val.indexOf(name) === 0) res = val.substring(name.length);\n    });\n    return res;\n  };\n\n  // Limpia los espacios en blanco y saltos de l\u00ednea de un texto\n  mnttTrimText=function (texto) {\n    return texto.replace(/(\\n|\\r|\\n\\r|\\s)/gm, \"\");\n  };\n\n  // Limpia los espacios en blanco y saltos de l\u00ednea de un texto SOLO al principio y al final de la misma\n  mnttCleanText=function (texto) {\n    return texto.replace(/(\\n|\\r|\\n\\r|^\\s*|\\s*$)/gm, \"\");\n  };\n\n  // Ejecuta un callback en funci\u00f3n de una condici\u00f3n definida\n  // a no ser que se cumpla una condicion de parada o un timeout\n  mnttWhen=function (options) {\n    var trueFn = function() {\n      return true;\n    };\n    var falseFn = function() {\n      return false;\n    };\n\n    var testName = options.testName || \"Not Defined\";\n    var variantName = options.variantName || \"Not Defined\";\n    var actionCondition = options.actionCondition || trueFn;\n    var actionCallback = options.actionCallback || trueFn;\n    var stopCondition = options.stopCondition || falseFn;\n    var stopCallback = options.stopCallback || trueFn;\n    var timeoutExpiration = options.timeoutExpiration || 30000; // 30 sg de timeout por defecto\n    var timeoutCallback = options.timeoutCallback || trueFn;\n    var timeoutCondition = falseFn;\n\n\n    try {\n      if (!stopCondition()) {\n        var timeoutTimer = setTimeout(function() {\n          timeoutCondition = trueFn;\n        },timeoutExpiration);\n      }\n\n      var ciclo=0;\n\n      (function wait() {\n\n        if (stopCondition()) {\n          mnttLog2Con(testName,variantName,\"mnttWhen: se cumplen STOPCONDITIONS - STOP waiting... :( \",\"debug\");\n          clearTimeout(timeoutTimer);\n          stopCallback();\n        } else if (timeoutCondition()) {\n          mnttLog2Con(testName,variantName,\"mnttWhen: \" + timeoutExpiration + \" timeout - STOP waiting... :(\",\"debug\");\n          timeoutCallback();\n        }else if (actionCondition()) {\n          mnttLog2Con(testName,variantName,\"mnttWhen: se cumplen ACTIONCONDITIONS - START Callback... :)\",\"debug\");\n          clearTimeout(timeoutTimer);\n          actionCallback();\n        } else {\n          if ( ciclo % 10 == 0 ) {\n            mnttLog2Con(testName,variantName,\"mnttWhen: No change - Keep waiting for preconditions... (\" + ciclo +\")\" ,\"debug\");\n          }\n          ciclo++;\n          setTimeout(wait, 100);\n        }\n      })();\n    }\n    catch(error) {\n      mnttLog2Con(testName,variantName,\"Se ha producido un error: \" + error.name + \": \" + error.message);\n      throw error;\n    }\n  };\n\n  // Funciones de checkin del template\n  mnttCheckPageReady=function (testName,variantName,pageCondition = function() {return true;}) {\n\n    return new Promise(function(resolve,reject) {\n      //Evaluamos si la p\u00e1gina ha cargado el Digital_Data y el Datalayer_general 100 milisegundos y si es as\u00ed resolvemos la promesa\n      mnttLog2Con(testName,variantName,\"[CheckPageReady] Waiting...\");\n      setTimeout(() => {\n        const intervalCheckPageReady = setInterval(function() {\n          if (!!window.digital_data && !!window.datalayer_general && pageCondition()) {\n            mnttLog2Con(testName,variantName,\"[CheckPageReady] digital_data & datalayer_general detected!! :)\",\"info\");\n            if (pageCondition.name!=\"pageCondition\") {\n              mnttLog2Con(testName,variantName,\"[CheckPageReady] \" + pageCondition.name + \" TRUE\");\n            }\n            clearInterval(intervalCheckPageReady);\n            clearTimeout(timeoutCheckPageReady);\n            resolve();\n          }\n        },100);\n\n\n        //Si tras 10 segundos no se ha generado el digital_data y el datalayer_general rechazamos la promesa\n        const timeoutCheckPageReady = setTimeout(() => {\n          clearInterval(intervalCheckPageReady);\n          mnttLog2Con(testName,variantName,\"[CheckPageReady] Timeout!! :(\", \"warning\");\n        },10000);\n\n      },0);\n\n    });\n  };\n\n  mnttCheckTarget=function (testName,variantName,target,currentValue,targetDescription) {\n    var tagTarget=\"\";\n    if (targetDescription!=\"\") {\n      tagTarget=\"Target \" + targetDescription;\n    } else {\n      tagTarget=\"Target no especificado\";\n    }\n    return new Promise(function(resolve,reject) {\n\n        if (target.toUpperCase().indexOf(currentValue.toUpperCase())>=0) {\n          mnttLog2Con(testName,variantName,\"[\" + tagTarget + \"] \" + currentValue + \" -> \" + target + \": Ok\", \"info\");\n          resolve(true);\n        } else {\n          mnttLog2Con(testName,variantName,\"[\" + tagTarget + \"] \" + currentValue + \" -> \" + target + \": KO\", \"warning\");\n        }\n\n    });\n  };\n\n  mnttCheckConditions=function (testName,variantName,funcionCondicion,conditionDescription) {\n    var tagCondition=\"\";\n    if (conditionDescription!=\"\") {\n        tagCondition=conditionDescription;\n    } else {\n        tagCondition=funcionCondicion.name;\n    }\n    mnttLog2Con(testName,variantName,\"[\" + tagCondition + \"] \" + \"Checkin condition: \" + funcionCondicion.name,\"info\");\n\n    return new Promise(function(resolve,reject) {\n\n        if (funcionCondicion()) {\n          mnttLog2Con(testName,variantName,\"[\" + tagCondition + \"]\" + \": Ok\", \"info\");\n          resolve(true);\n        } else {\n          mnttLog2Con(testName,variantName,\"[\" + tagCondition + \"]\" + \": KO !!!\", \"warning\");\n        }\n\n    });\n  };\n\n\n\n  //Update estado de las MNTTGF: true=running\n  mnttGF=true;\n  mnttLog2Con(MNTT_NAME,\"\",\"Monetate: Global functions RUNNING!!\");\n  mnttLog2GTM(MNTT_NAME,\"\");\n\n  // Estado locked para bloquear todas las experiencias de monetate que dependen de las MNTTGF\n  // mnttGF=\"locked\";\n  // mnttLog2Con(MNTT_NAME,\"\",\"Monetate: Global functions LOCKED!!\");\n\n\n}\n", "ref": "1123/5341244.js"});