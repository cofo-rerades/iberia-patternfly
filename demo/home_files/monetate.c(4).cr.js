monetate.c.cr({"data": "(function() {\n  function getCookie(cookieName) {\n    let match = document.cookie.match(new RegExp('(^|;|;\\\\s)' + cookieName + '=([^;]+)'));\n    return match ? match[2] : '';\n  }\n\n  function when(condition, stopAfter = 7000) {\n    return new Promise((resolve, reject) => {\n      let stopByTimeout = false;\n      let value = false;\n\n      window.setTimeout(() => { stopByTimeout = true; }, stopAfter);\n\n      (function _innerWaitFor() {\n        if (stopByTimeout) { reject('when stopped: by timeout'); return; }\n        try { value = condition(); } catch (e) { /* silent */ }\n        value ? resolve(value) : window.setTimeout(_innerWaitFor, 50);\n      })();\n    });\n  }\n\n  function getScope(namespace) {\n    window.lc = window.lc || {};\n    window.lc.scope = window.lc.scope || {};\n    window.lc.scope[namespace] = window.lc.scope[namespace] || {};\n    return window.lc.scope[namespace];\n  }\n\n  function isInIframe(base = window) {\n    try {\n      return base.self !== base.parent;\n    } catch (e) {\n      return true;\n    }\n  }\n\n  function getLogger(namespace, cookieName, cookieValue) {\n    const settings = { namespace, cookieName, cookieValue };\n    const defaultColour = 'blue';\n    const typesMap = {\n      info: 'blue',\n      log: 'blue',\n      ok: 'green',\n      error: 'crimson',\n      warn: '#f9a66d'\n    };\n\n    return Object.keys(typesMap).reduce(function(prev, curr) {\n      prev[curr] = getLoggingMethod(settings, typesMap[curr], false);\n      prev[curr + 'TS'] = getLoggingMethod(settings, typesMap[curr], true);\n      return prev;\n    }, getLoggingMethod(settings, defaultColour, false));\n  }\n\n  function getLoggingMethod(settings, color, timeStampNeeded) {\n    const CONSOLE_METHOD = 'info';\n\n    return function () {\n      if (!isEnabled(settings)) return;\n\n      const timestamp = new Date().toLocaleTimeString('en-GB');\n      const iframeSuffix = isInIframe() ? ' [iframe]' : '';\n      const tsSuffix = timeStampNeeded ? (` [${timestamp}]`) : '';\n      const descriptor = `%c[${settings.namespace}]:${tsSuffix}${iframeSuffix}`;\n\n      if (window.console && typeof window.console[CONSOLE_METHOD] === 'function') {\n        window.console[CONSOLE_METHOD](descriptor, 'color: ' + color, ...arguments);\n      }\n    };\n  }\n\n  function isEnabled({ cookieName, cookieValue = '' }) {\n    const currentCookieValue = getCookie(cookieName);\n\n    if (cookieValue === '') return currentCookieValue;\n    return (currentCookieValue === cookieValue.toString());\n  }\n\n  function onDomReady(cb) {\n    if (document.readyState === 'loading') {\n      window.addEventListener('DOMContentLoaded', cb);\n    } else {\n      cb();\n    }\n  }\n\n  const CAMPAIGN_ID = 'iberia270';\n  const CAMPAIGN_PREFIX = 'lc-iberia270';\n  const CAMPAIGN_FULL_NAME = 'lc-iberia270-hide-flexible-payments-banner';\n  getScope(CAMPAIGN_ID);\n\n  // ////\n  //\n  // JS Action template for MNTTGF 2.0 - 6 febrero 2023\n  // Template de acci\u00f3n javascript para utilizar con las MONETATE GLOBAL FUNCTIONS (MNTTGF) basado en promesas de js\n  //\n  // ////\n\n  function registerAndExecuteVariant({ variantName, campaignName, variantFn }) {\n    try {\n      wait4MNTTGF()\n        .then(processVariant, falloMNTTGFLoad);\n    } catch (err) {\n      log2Con(err.toString(), 'error');\n    }\n\n    function processVariant() {\n      checkPageReady()\n        .then(() => {\n          log2Con('OK - Rendered', 'warning');\n          log2GTM();\n          variantFn();\n          log2Con('Fin de la variante', 'info');\n        })\n        .catch(err => {\n          log2Con('Error!!! ' + err.toString(), 'error');\n        });\n    }\n\n    function wait4MNTTGF() {\n      return new Promise(function(resolve, reject) {\n      // eslint-disable-next-line no-console\n        console.debug(new Date().toLocaleString('es-ES', {timeZoneName: 'short'}) + ' - [' + campaignName + '|' + variantName + '] - waiting 4 MNTTGF to load...');\n\n        // Evaluamos si las MNTTGF se han cargado cada 100 milisegundos y si es as\u00ed resolvemos la promesa\n        setTimeout(() => {\n          let intervalMNTTGF;\n          let timeoutMGTTGF;\n\n          intervalMNTTGF = setInterval(function() {\n            if (window.mnttGF) {\n              log2Con('MNTTGF running!! :)', 'info');\n              clearInterval(intervalMNTTGF);\n              clearTimeout(timeoutMGTTGF);\n              resolve();\n            } else if (window.mnttGF === 'locked') {\n              log2Con('ATTENTION!!!! MNTTGF LOCKED!!!!!!!!!!!!!!!!!!!!!!!!! :(', 'warning');\n              clearInterval(intervalMNTTGF);\n              clearTimeout(timeoutMGTTGF);\n              resolve();\n            } else if (window.mnttGF === 'loading') {\n              log2Con('loading MNTTGF... :|', 'info');\n            }\n          }, 100);\n\n          // Si tras 10 segundos no se han cargado las MNTTGF rechazamos la promesa\n          timeoutMGTTGF = setTimeout(() => {\n            clearInterval(intervalMNTTGF);\n            reject();\n          }, 10000);\n        }, 0);\n      });\n    }\n\n    function falloMNTTGFLoad() {\n      const timestamp = new Date().toLocaleString('es-ES', {timeZoneName: 'short'});\n      const texto = 'MNTTGF TIMEOUT!!!: No se ha cargado la experiencia MONETATE GLOBAL FUNCTIONS :(';\n      const aviso = timestamp + ' [' + campaignName + '|' + variantName + ']:--> ' + texto;\n\n      // eslint-disable-next-line no-console\n      console.error(aviso);\n\n      const avisoHTML = '<div class=\"mnttgf_error\">' + timestamp + ': ' + texto + '</div>';\n\n      if (!document.getElementById('MNTT_LOGS')) {\n        const output = '<div data-nosnippet id=\"MNTT_LOGS\" class=\"mnttgf_logs\" style=\"display: none;\"></div>';\n        document.querySelector('body').insertAdjacentHTML('beforeend', output);\n      }\n\n      const idText = (campaignName + '_' + variantName).trim();\n\n      if (!document.getElementById(idText)) {\n        const output = '<div id=\"' + idText + '\" class=\"mnttgf_logs\" style=\"display: none;\">Monetate log: [' + campaignName + '][' + variantName + '] </div>';\n        document.getElementById('MNTT_LOGS').insertAdjacentHTML('beforeend', output);\n      }\n\n      document.getElementById(idText).insertAdjacentHTML('beforeend', avisoHTML);\n    }\n\n    function checkPageReady(pageCondition = function() { return true; }) {\n      return window.mnttCheckPageReady(campaignName, variantName, pageCondition);\n    }\n\n    // function checkConditions(funcionCondicion, conditionDescription = '') {\n    //   return window.mnttCheckConditions(campaignName, variantName, funcionCondicion, conditionDescription);\n    // }\n\n    // function checkTarget(target, currentValue, targetDescription = '') {\n    //   return window.mnttCheckTarget(campaignName, variantName, target, currentValue, targetDescription);\n    // }\n\n    function log2Con(texto, criticidad = 'info') {\n      window.mnttLog2Con(campaignName, variantName, texto, criticidad);\n    }\n\n    // function obj2Con(objeto) {\n    //   window.mnttObj2Con(campaignName, variantName, objeto);\n    // }\n\n    function log2GTM(test = campaignName, action = variantName) {\n      window.mnttLog2GTM(test, action);\n    }\n\n  // function sendEventQM(eventNum, eventValue = '', eventDesc = '') {\n  //   window.mnttSendEventQM(campaignName, variantName, eventNum, eventValue, eventDesc);\n  // }\n  }\n\n  const SCRIPT_ID = 'variant-v1';\n  const SCRIPT_PREFIX = `${CAMPAIGN_PREFIX}-${SCRIPT_ID}`;\n  const infoLogger = getLogger(SCRIPT_PREFIX + '-info', 'lc-debug');\n  getLogger(SCRIPT_PREFIX + '-debug', 'lc-debug', CAMPAIGN_ID);\n\n  function registerAndExecute(executeVariant) {\n    registerAndExecuteVariant({\n      variantName: SCRIPT_ID,\n      campaignName: CAMPAIGN_FULL_NAME,\n      variantFn: () => {\n        executeVariant();\n        infoLogger.ok('variant registered');\n      }\n    });\n  }\n\n  /* eslint-disable no-else-return */\n\n  infoLogger.info('running');\n  init();\n\n  function init() {\n    onDomReady(() => {\n      checkAndRun();\n      const main = document.querySelector('app-root + main');\n      const observer = new MutationObserver(mutationList => {\n        mutationList.forEach(function(mutation) {\n          mutation.addedNodes.forEach(function(added_node) {\n            if (added_node === document.querySelector('ib-booking-banner-flexibility')) {\n              checkAndRun();\n            }\n          });\n        });\n      });\n      if (document.querySelector('ib-booking-banner-flexibility')) {\n        checkAndRun();\n      } else {\n        main && observer.observe(main, { subtree: true, childList: true });\n      }\n    });\n  }\n\n  function checkAndRun() {\n    infoLogger.info('check and running variant-1');\n    when(function() {\n      return document.querySelector('ib-booking-banner-flexibility');\n    })\n      .then(function() {\n        registerAndExecute(() => {\n          applyVariant();\n        });\n      })\n      .catch(function(err) {\n        infoLogger.error(err);\n      });\n  }\n\n  function applyVariant() {\n    document.body.classList.add('lc-iberia270-hidden');\n  }\n})();\n//# sourceURL=url://LeanConvert/iberia270/entries/variant-v1/js.js", "ref": "1123/5283399.js"});