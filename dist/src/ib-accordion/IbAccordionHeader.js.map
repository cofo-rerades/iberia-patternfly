{"version":3,"file":"IbAccordionHeader.js","sourceRoot":"","sources":["../../../src/ib-accordion/IbAccordionHeader.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,iBAAiB,EACjB,4BAA4B,GAC7B,MAAM,mDAAmD,CAAC;AAG3D,MAAM,OAAO,iBAAkB,SAAQ,iBAAiB;IAGtD;QACE,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1D,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;IAC/C,CAAC;IAED,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,+DAA+D;QAC/D,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACzD,aAAa;QACb,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QACpD,gCAAgC;QAChC,2BAA2B;QAC3B,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACzD,2BAA2B;QAC3B,MAAM,KAAK,GAAG,IAAI,aAAa,EAAE,CAAC;QAClC,KAAK,CAAC,WAAW,CAAC;;;;;;;;OAQf,CAAC,CAAC;QACL,2CAA2C;QAC3C,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,IAAI,CAAC,UAAU,CAAC,kBAAkB,GAAG;gBACnC,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB;gBACrC,KAAK;aACN,CAAC;QACJ,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,oDAAoD,CAAC,CAAC;IACpE,CAAC;IAED;;OAEG;IACH,2BAA2B;IACnB,cAAc,CAAC,MAAa;QAClC,MAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAChC,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,+BAA+B;QACzE,IAAI,GAAG,EAAE,CAAC;YACR,IAAI,CAAC,aAAa,CAChB,IAAI,4BAA4B,CAC9B,QAAQ,EACR,IAAI,EACJ,GAA6B,CAC9B,CACF,CAAC;QACJ,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;IACjD,CAAC;IAED,MAAM,KAAK,kBAAkB;QAC3B,OAAO,CAAC,GAAG,iBAAiB,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;IACvE,CAAC;IAED,wBAAwB,CAAC,IAAY,EAAE,QAAgB,EAAE,QAAgB;QACvE,KAAK,CAAC,wBAAwB,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACzD,IAAI,IAAI,KAAK,kBAAkB,EAAE,CAAC;YAChC,OAAO,CAAC,GAAG,CAAC,6BAA6B,QAAQ,OAAO,QAAQ,EAAE,CAAC,CAAC;QACtE,CAAC;IACH,CAAC;CACF","sourcesContent":["import {\n  PfAccordionHeader,\n  PfAccordionHeaderChangeEvent,\n} from '@patternfly/elements/pf-accordion/pf-accordion.js';\nimport type { IbAccordion } from './IbAccordion.js';\n\nexport class IbAccordionHeader extends PfAccordionHeader {\n  private _boundCustomOnClick: (event: Event) => void;\n\n  constructor() {\n    super();\n    this._boundCustomOnClick = this._customOnClick.bind(this);\n    console.log('IbAccordionHeader initialized');\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Remove the default click listener added by PfAccordionHeader\n    this.addEventListener('click', this._boundCustomOnClick);\n    // @ts-ignore\n    this.removeEventListener('click', this['#onClick']);\n    // Add your custom click handler\n    // eslint-disable-next-line\n    this.addEventListener('click', this._boundCustomOnClick);\n    // Add custom CSS variables\n    const style = new CSSStyleSheet();\n    style.replaceSync(`\n      #button {\n        border-bottom: 1px solid #666;\n      }\n      #button[aria-expanded='true'] {\n        border-bottom: 0px;\n      }\n\n      `);\n    // Add CSS variables via adoptedStyleSheets\n    if (this.shadowRoot) {\n      this.shadowRoot.adoptedStyleSheets = [\n        ...this.shadowRoot.adoptedStyleSheets,\n        style,\n      ];\n    }\n    console.log('IbAccordionHeader connected to the DOM and patched');\n  }\n\n  /**\n   * Your custom click behavior replacing #onClick\n   */\n  // eslint-disable-next-line\n  private _customOnClick(_event: Event) {\n    const expanded = !this.expanded;\n    const acc = this.closest('ib-accordion'); // Target your custom accordion\n    if (acc) {\n      this.dispatchEvent(\n        new PfAccordionHeaderChangeEvent(\n          expanded,\n          this,\n          acc as unknown as IbAccordion,\n        ),\n      );\n    }\n    console.log('Custom click behavior executed!');\n  }\n\n  static get observedAttributes() {\n    return [...PfAccordionHeader.observedAttributes, 'header-attribute'];\n  }\n\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n    super.attributeChangedCallback(name, oldValue, newValue);\n    if (name === 'header-attribute') {\n      console.log(`Header attribute changed: ${oldValue} -> ${newValue}`);\n    }\n  }\n}\n"]}